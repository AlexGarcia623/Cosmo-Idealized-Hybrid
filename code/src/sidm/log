5c5
<  *
---
>  *  
8,12c8,12
<  * \author
<  * \brief
<  * \details
<  *
<  *
---
>  * \author     
>  * \brief        
>  * \details     
>  * 
>  * 
14c14
<  *
---
>  * 
18,19d17
< #include <gsl/gsl_math.h>
< #include <math.h>
23a22,23
> #include <math.h>
> #include <gsl/gsl_math.h>
29c29,30
< /* first init from init.c only called on startup not for restarts */
---
> 
> /* first init from init.c */
33,41c34
<   unsigned char state;
<   unsigned char reaction;
<   double psum, xran;
< 
<   set_cosmo_factors_for_current_time();
< 
<   SIDM_arho = 1. / (All.cf_atime * All.cf_atime * All.cf_atime);
<   SIDM_arho *= All.HubbleParam * All.HubbleParam;
<   SIDM_avel = 1.0 / All.cf_atime;
---
>   int state, reaction;
53d45
<   /* set internal SIDM variables for each particle, we set all auxiliary SIDM variables here for all particles */
58c50
<           P[i].sidm_PSum[reaction]            = 0;
---
>           P[i].sidm_PSum[reaction] = 0;
68d59
<     }
70,74c61,62
<   for(reaction = 0; reaction < SIDM_REACTIONS; reaction++)
<     {
<       All.sidm_ShouldScatter[reaction] = All.sidm_Scatters[reaction] = All.sidm_Rejected[reaction] =
<           All.sidm_EnergyForbidden[reaction]                         = 0;
<       All.sidm_EnergyInjected[reaction] = All.sidm_ScatteredMass[reaction] = 0.0;
---
>       /* put all particles in ground state */
>       P[i].sidm_State = 0;
77,102c65,66
<   All.sidm_EnergyInjectedCheck_sidm_parts = All.sidm_EnergyInjectedCheck_all_parts = 0.0;
< 
<   /* set up initial state population (i.e. set the state variable and change the mass accordingly) */
<   for(i = 0; i < NumPart; i++)
<     {
<       /* here we have to filter by type to get the initial fractions and masses right */
<       if((1 << P[i].Type) & (SIDM))
<         {
<           xran = get_random_number();
< 
<           for(psum = 0.0, state = 0; state < SIDM_STATES; state++)
<             {
<               psum += STSIDM[state].InitialFraction;
<               if(xran < psum)
<                 break;
<             }
< 
<           if((state >= SIDM_STATES) || (state < 0))
<             terminate("SIDM: wrong state initialization state=%d  SIDM_STATES=%d\n", state, SIDM_STATES);
< 
<           P[i].sidm_State = state;
< 
<           /* this mass change is tiny; note that the check_omega routine is called before this mass change in init.c */
<           P[i].Mass = (1.0 + STSIDM[state].DeltaMass) * All.SIDM_GroundStateMass;
<         }
<     }
---
>   for(reaction = 0; reaction < SIDM_REACTIONS; reaction++)
>     All.sidm_ShouldScatter[reaction] = All.sidm_Scatters[reaction] = All.sidm_Rejected[reaction] = All.sidm_EnergyForbidden[reaction] = 0;
104,105c68
<   /* check the state stats */
<   state_stats();
---
>   mpi_printf("done.\n");
107d69
<   mpi_printf("SIDM: done.\n");
110c72
< void sidm_SetGroundStateMass(void)
---
> void sidm_SetGroundStateMass()
112c74
<   unsigned char reaction;
---
>   int reaction;
116,118c78,80
<   All.SIDM_clight          = (2.99792458e10 / All.UnitVelocity_in_cm_per_s);
<   All.SIDM_GroundStateMass = All.MassTable[1];  // FIXME: particle mass
< 
---
>   SIDM_clight = (2.99792458e10 / All.UnitVelocity_in_cm_per_s);
>   All.SIDM_GroundStateMass = All.MassTable[1];                       //FIXME: particle mass
>   
126,133c88,89
<       vmin    = sqrt(fabs(delta_E / (0.5 * 0.5 * All.SIDM_GroundStateMass)));  // assuming mu=0.5 (equal mass particles)
<       vmin    = (((delta_E) > (0)) ? (vmin) : (-vmin));
<       mpi_printf(
<           "SIDM: Scatter Matrix: reaction=%d:  %d %d --> %d %d   delta_mass_1=%g   delta_mass_2=%g   delta_E_1=%g  delta_E_2=%g   "
<           "delta_E=%g (required min. relative velocity=%g)\n",
<           reaction, SMSIDM[reaction].In1, SMSIDM[reaction].In2, SMSIDM[reaction].Out1, SMSIDM[reaction].Out2,
<           (STSIDM[SMSIDM[reaction].Out1].DeltaMass - STSIDM[SMSIDM[reaction].In1].DeltaMass),
<           (STSIDM[SMSIDM[reaction].Out2].DeltaMass - STSIDM[SMSIDM[reaction].In2].DeltaMass), delta_E_1, delta_E_2, delta_E, vmin);
---
>       vmin = sqrt(fabs(delta_E / (0.5 * 0.5 * All.SIDM_GroundStateMass))); //assuming mu=0.5 (equal mass particles) 
>       mpi_printf("SIDM: Scatter Matrix: reaction=%d:  %d %d --> %d %d   delta_mass_1=%g   delta_mass_2=%g   delta_E_1=%g  delta_E_2=%g   delta_E=%g (required min. relative velocity=%g)\n", reaction, SMSIDM[reaction].In1, SMSIDM[reaction].In1, SMSIDM[reaction].Out1, SMSIDM[reaction].Out2, (STSIDM[SMSIDM[reaction].Out1].DeltaMass - STSIDM[SMSIDM[reaction].In1].DeltaMass), (STSIDM[SMSIDM[reaction].Out1].DeltaMass - STSIDM[SMSIDM[reaction].In2].DeltaMass), delta_E_1, delta_E_2, delta_E, vmin);
135c91
<   mpi_printf("SIDM: init done.\n");
---
>     mpi_printf("SIDM: init done.\n");
141d96
<   unsigned char reaction;
143c98
<   Nforces    = 0;
---
>   Nforces = 0;
159,165c114,121
< #ifndef HIERARCHICAL_GRAVITY
<     if(Tree_Points[i].ActiveFlag)
< #endif
<       if(((1 << (Tree_Points[i].Type)) & (SIDM)))
<         {
<           TargetList[Nforces++] = i + Tree_ImportedNodeOffset;
<         }
---
>     if((Tree_Points[i].Type & 16) && ((1 << (Tree_Points[i].Type & 15)) & (SIDM)))
>       {
>         TargetList[Nforces++] = i + Tree_ImportedNodeOffset;
>       }
> 
>   PSIDM = (struct sidm_data_p *) mymalloc("PSIDM", Nforces * sizeof(struct sidm_data_p));
>   TSIDM = (struct sidm_data_t *) mymalloc("TSIDM", (NumPart + Tree_NumPartImported) * sizeof(struct sidm_data_t));
>   LISIDM = (struct sidm_list *) mymalloc("LISIDM", Nforces * sizeof(struct sidm_list));
167,169d122
<   PSIDM  = (struct sidm_data_p *)mymalloc("PSIDM", Nforces * sizeof(struct sidm_data_p));
<   TSIDM  = (struct sidm_data_t *)mymalloc("TSIDM", (NumPart + Tree_NumPartImported) * sizeof(struct sidm_data_t));
<   LISIDM = (struct sidm_list *)mymalloc("LISIDM", Nforces * sizeof(struct sidm_list));
175,176c128,129
<   for(reaction = 0; reaction < SIDM_REACTIONS; reaction++)
<     SIDM_Ekin_before_total[reaction] = SIDM_Ekin_after_total[reaction] = SIDM_Scattered_Mass[reaction] = 0.0;
---
>   SIDM_Ekin_before_total = 0.0;
>   SIDM_Ekin_after_total = 0.0;
206c159
< void sidm_DoScatter(void)
---
> void sidm_DoScatter()
212c165
<   // set_cosmo_factors_for_current_time();
---
>   set_cosmo_factors_for_current_time();
226c179
<   TIMER_STOPSTART(CPU_SIDM_HSML, CPU_SIDM_CHECK);
---
>   TIMER_STOPSTART(CPU_SIDM_HSML, CPU_SIDM_CHECK); 
273,274c226
<   int done_flag;
<   unsigned char reaction;
---
>   int reaction, done_flag;
288c240
<           dt = (P[i].TimeBinGrav ? (((integertime)1) << P[i].TimeBinGrav) : 0) * All.Timebase_interval;
---
>           dt = (P[i].TimeBinGrav ? (((integertime) 1) << P[i].TimeBinGrav) : 0) * All.Timebase_interval;
292c244
<               hubble_a      = hubble_function(All.Time);
---
>               hubble_a = hubble_function(All.Time);
294c246
<               dtime         = All.Time * dt / time_hubble_a;
---
>               dtime = All.Time * dt / time_hubble_a;
313c265
<               PSIDM[nforces].RandX                   = xran / dtime;
---
>               PSIDM[nforces].RandX = xran / dtime;
315c267
<               LISIDM[nforces].List2                  = SIDM_NumScatterParticles;
---
>               LISIDM[nforces].List2 = SIDM_NumScatterParticles;
323c275
<                       PSIDM[nforces].ScatterReaction               = reaction;
---
>                       PSIDM[nforces].ScatterReaction = reaction;
325c277
<                       done_flag                                    = 1;
---
>                       done_flag = 1;
330,331c282,283
<                 terminate("no scatter reaction found PSum_allreaction=%g xran=%g PSum_partial=%g\n", PSum_allreaction, xran,
<                           PSum_partial);
---
>                 terminate("no scatter reaction found PSum_allreaction=%g xran=%g PSum_partial=%g\n", PSum_allreaction, xran, PSum_partial);
> 
339,344c291,293
< #ifndef HIERARCHICAL_GRAVITY
<     if(Tree_Points[i].ActiveFlag)
< #endif
<       if(((1 << (Tree_Points[i].Type)) & (SIDM)))
<         {
<           dt = (Tree_Points[i].sidm_TimeBin ? (((integertime)1) << Tree_Points[i].sidm_TimeBin) : 0) * All.Timebase_interval;
---
>     if((Tree_Points[i].Type & 16) && ((1 << (Tree_Points[i].Type & 15)) & (SIDM)))
>       {
>         dt = (Tree_Points[i].sidm_TimeBin ? (((integertime) 1) << Tree_Points[i].sidm_TimeBin) : 0) * All.Timebase_interval; 
426c377
<   unsigned char scatter_reaction, reaction;
---
>   int scatter_reaction, reaction;
429a381
> 
437,438c389
<           terminate("SIDM: offset=%d NumNgb=%d S1=%d S2=%d n=%d sidx=%d\n", PSIDM[n].ngb_Offset, PSIDM[sidx].NumNgb, LISIDM[n].List1,
<                     LISIDM[sidx].List2, n, sidx);
---
>           terminate("SIDM: offset=%d NumNgb=%d S1=%d S2=%d n=%d sidx=%d\n", PSIDM[n].ngb_Offset, PSIDM[sidx].NumNgb, LISIDM[n].List1, LISIDM[sidx].List2, n, sidx);
441c392
<       // sort by increasing distance
---
>       //sort by increasing distance
450a402
> 
455a408
> 
462,463c415,416
<               PSIDM[sidx].ScatterID                           = PSIDM[n].ngb_Entry[p].NgbIDs;
<               scatterlist_local[n]                            = PSIDM[n].ngb_Entry[p].NgbIDs;
---
>               PSIDM[sidx].ScatterID = PSIDM[n].ngb_Entry[p].NgbIDs;
>               scatterlist_local[n] = PSIDM[n].ngb_Entry[p].NgbIDs;
465c418
<               done_flag                                       = 1;
---
>               done_flag = 1;
471,474c424,426
<       /* take closest particle to scatter with; will select particles in wrong state for multiple states; scatter state check is then
<        * turned off */
<       PSIDM[sidx].ScatterID                           = PSIDM[n].ngb_Entry[1].NgbIDs;
<       scatterlist_local[n]                            = PSIDM[n].ngb_Entry[1].NgbIDs;
---
>       /* take closest particle to scatter with; will select particles in wrong state for multiple states; scatter state check is then turned off */
>       PSIDM[sidx].ScatterID = PSIDM[n].ngb_Entry[1].NgbIDs;
>       scatterlist_local[n] = PSIDM[n].ngb_Entry[1].NgbIDs;
478,479c430
<         terminate("no scatter partner found offset=%d numbgb=%d scatter_reaction=%d PSum_partial=%g p=%d  PSIDM[sidx].RandX=%g\n",
<                   PSIDM[n].ngb_Offset, PSIDM[sidx].NumNgb, scatter_reaction, PSum_partial, p, PSIDM[sidx].RandX);
---
>         terminate("no scatter partner found offset=%d numbgb=%d scatter_reaction=%d PSum_partial=%g p=%d\n", PSIDM[n].ngb_Offset, PSIDM[sidx].NumNgb, scatter_reaction, PSum_partial, p);
482c433,434
<   count  = mymalloc("count", sizeof(int) * NTask);
---
> 
>   count = mymalloc("count", sizeof(int) * NTask);
501,502c453,454
<   MPI_Allgatherv(scatterlist_local, TotNumScatterParticles * sizeof(MyIDType), MPI_BYTE, scatterlist_global, count, offset, MPI_BYTE,
<                  MPI_COMM_WORLD);
---
>   MPI_Allgatherv(scatterlist_local, TotNumScatterParticles * sizeof(MyIDType), MPI_BYTE, scatterlist_global, count, offset, MPI_BYTE, MPI_COMM_WORLD);
> 
518,519c470,471
<       int sidx               = LISIDM[n].List1;
<       unsigned char reaction = PSIDM[sidx].ScatterReaction;
---
>       int sidx = LISIDM[n].List1;
>       int reaction = PSIDM[sidx].ScatterReaction;
538,539c490
<   int i;
<   unsigned char state;
---
>   int i, state;
542a494
>   
544c496
<   for(state = 0; state < SIDM_STATES; state++)
---
>   for (state = 0; state < SIDM_STATES; state++)
547c499
<   for(i = 0; i < NumPart; i++)
---
>   for (i = 0; i < NumPart; i++)
549c501
<       if((1 << P[i].Type) & (SIDM))
---
>       if((1 << P[i].Type) & (SIDM)) 
572,578c524,525
<         printf("SIDM: %06.6f percent of particles (%012llu) in state %02d\n", (100.0 * output_longs[state] / tot_particles),
<                output_longs[state], state);
<         printf("SIDM: average particle mass in that state: (mass - groundstatemass)/groundstatemass: %g   (groundstatemass=%g)\n",
<                (tot_mass_states[state] > 0)
<                    ? ((tot_mass_states[state] / output_longs[state] - All.SIDM_GroundStateMass) / All.SIDM_GroundStateMass)
<                    : 0,
<                All.SIDM_GroundStateMass);
---
>         printf("SIDM: %06.2f percent of particles in state %02d\n", (100.0 * output_longs[state] / tot_particles), state);
>         printf("SIDM: average particle mass in that state: (mass - groundstatemass)/groundstatemass: %g   (groundstatemass=%g)\n", (tot_mass_states[state]>0)?((tot_mass_states[state]/output_longs[state]-All.SIDM_GroundStateMass)/All.SIDM_GroundStateMass):0, All.SIDM_GroundStateMass);
579a527,528
> 
> 
581a531,532
> 
> 
589c540
<   double global_Ekin_before_total[SIDM_REACTIONS], global_Ekin_after_total[SIDM_REACTIONS], global_Scattered_Mass[SIDM_REACTIONS];
---
>   double global_Ekin_before_total = 0.0, global_Ekin_after_total = 0.0;
591d541
<   double total_EnergyInjected = 0.0, total_ScatteredMass = 0.0;
593c543,544
<   unsigned char reaction;
---
>   int reaction;
>  
598c549
<       local_ShouldScatterInStep[reaction]  = 0;
---
>       local_ShouldScatterInStep[reaction] = 0;
601c552
<       local_ScattersInStep[reaction]  = 0;
---
>       local_ScattersInStep[reaction] = 0;
604c555
<       local_rejected[reaction]  = 0;
---
>       local_rejected[reaction] = 0;
607c558
<       local_EnergyForbidden[reaction]  = 0;
---
>       local_EnergyForbidden[reaction] = 0;
614c565
<           local_EnergyForbidden[reaction] += PSIDM[i].EnergyForbidden[reaction];
---
>           local_EnergyForbidden[reaction] += PSIDM[i].EnergyForbidden[reaction] ;
621c572
<       reaction   = PSIDM[i].ScatterReaction;
---
>       reaction = PSIDM[i].ScatterReaction;
633,634c584
<       /* note that the reverse check is not necessary since a scatter partner is usually not marked as a particle that is supposed to
<        * scatter in the first place */
---
>       /* note that the reverse check is not necessary since a scatter partner is usually not marked as a particle that is supposed to scatter in the first place */
637,638c587
<           terminate("failed scatter: %d %d | local_index=%d global_index=%d Nforces=%d\n", TSIDM[target].ScattersInStep[reaction],
<                     PSIDM[i].ShouldScatterInStep[reaction], i, target, Nforces);
---
>           terminate("failed scatter: %d %d | local_index=%d global_index=%d Nforces=%d\n", TSIDM[target].ScattersInStep[reaction], PSIDM[i].ShouldScatterInStep[reaction], i, target, Nforces);
646c595
<       local_ScattersInStep[reaction] += (int)TSIDM[i].ScattersInStep[reaction];
---
>       local_ScattersInStep[reaction] += (int) TSIDM[i].ScattersInStep[reaction];
658,660d606
<       MPI_Allreduce(&SIDM_Ekin_before_total[reaction], &global_Ekin_before_total[reaction], 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);
<       MPI_Allreduce(&SIDM_Ekin_after_total[reaction], &global_Ekin_after_total[reaction], 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);
<       MPI_Allreduce(&SIDM_Scattered_Mass[reaction], &global_Scattered_Mass[reaction], 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);
662a609,611
>   MPI_Allreduce(&SIDM_Ekin_before_total, &global_Ekin_before_total, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);
>   MPI_Allreduce(&SIDM_Ekin_after_total, &global_Ekin_after_total, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);
>  
665c614
<       unsigned char reaction;
---
>       int reaction;
668,678c617,619
<           printf(
<               "SIDM: STEP: SCATTERS:    reaction=%02d ShouldScatterInStep=%010d  ScattersInStep=%010d  rejected=%010d  (%06.2f "
<               "percent)   energ_forbidden=%012d\n",
<               reaction, global_ShouldScatterInStep[reaction], global_ScattersInStep[reaction], global_rejected[reaction],
<               100.0 * global_rejected[reaction] / (2.0 * global_ShouldScatterInStep[reaction] + 1e-5),
<               global_EnergyForbidden[reaction]);
<           printf(
<               "SIDM: STEP: KIN. ENERGY: reaction=%02d before scattering=%g  after scatter=%g absdel=%g reldelta=%g \n", reaction,
<               global_Ekin_before_total[reaction], global_Ekin_after_total[reaction],
<               global_Ekin_after_total[reaction] - global_Ekin_before_total[reaction],
<               (global_Ekin_after_total[reaction] - global_Ekin_before_total[reaction]) / (1e-20 + global_Ekin_before_total[reaction]));
---
>           printf("SIDM: scatters step: reaction = %d  ShouldScatterInStep = %010d  ScattersInStep = %010d  rejected=%010d  (%06.2f percent)   energ_forbidden=%010d\n", reaction,
>                  global_ShouldScatterInStep[reaction], global_ScattersInStep[reaction], global_rejected[reaction],
>                  100.0 * global_rejected[reaction] / (2.0 * global_ShouldScatterInStep[reaction] + 1e-5), global_EnergyForbidden[reaction]);
680d620
< 
686,688c626
<           All.sidm_EnergyForbidden[reaction] += global_EnergyForbidden[reaction];
<           All.sidm_EnergyInjected[reaction] += (global_Ekin_after_total[reaction] - global_Ekin_before_total[reaction]);
<           All.sidm_ScatteredMass[reaction] += global_Scattered_Mass[reaction];
---
>           All.sidm_EnergyForbidden[reaction] += global_EnergyForbidden[reaction]; 
693,711c631,639
<           total_EnergyInjected += All.sidm_EnergyInjected[reaction];
<           total_ScatteredMass += All.sidm_ScatteredMass[reaction];
<           printf(
<               "SIDM: TOTAL: SCATTERS:    reaction=%02d ShouldScatter=%010llu  Scatters=%010llu  Rejected=%010llu (%06.2f percent)  "
<               "energ_forbidden=%012llu\n",
<               reaction, All.sidm_ShouldScatter[reaction], All.sidm_Scatters[reaction], All.sidm_Rejected[reaction],
<               100.0 * All.sidm_Rejected[reaction] / (All.sidm_ShouldScatter[reaction] + 1e-20), All.sidm_EnergyForbidden[reaction]);
< 
<           printf("SIDM: TOTAL: KIN. ENERGY: reaction=%02d energy injected=%g  scattered mass=%g  velkick=%g\n", reaction,
<                  All.sidm_EnergyInjected[reaction], All.sidm_ScatteredMass[reaction],
<                  sqrt(fabs(All.sidm_EnergyInjected[reaction]) / (1e-20 + All.sidm_ScatteredMass[reaction])));
<         }
<       printf("SIDM: total over all reactions\n");
<       printf(
<           "SIDM: total: scatters sum over all reaction channels: ShouldScatter = %010d  Scatters = %010d  Rejected=%010d  (%06.2f "
<           "percent)\n",
<           total_ShouldScatter, total_Scatters, total_Rejected, 100.0 * total_Rejected / (total_ShouldScatter + 1e-20));
<       printf("SIDM: total: injected energy over all reaction channels: energy injected=%g scattered mass=%g\n", total_EnergyInjected,
<              total_ScatteredMass);
---
>           printf("SIDM: scatters total: reaction = %d  ShouldScatter = %010d  Scatters = %010d  Rejected=%010d  (%06.2f percent)   energ_forbidden=%010d\n", reaction,
>                  All.sidm_ShouldScatter[reaction], All.sidm_Scatters[reaction], All.sidm_Rejected[reaction], 100.0 * All.sidm_Rejected[reaction] / (All.sidm_ShouldScatter[reaction] + 1e-20), All.sidm_EnergyForbidden[reaction]);
>           fflush(stdout);
>         }
>       printf("SIDM: scatters total (sum): ShouldScatter = %010d  Scatters = %010d  Rejected=%010d  (%06.2f percent)\n",
>              total_ShouldScatter, total_Scatters, total_Rejected, 100.0 * total_Rejected / (total_ShouldScatter + 1e-20));
>       fflush(stdout);
> 
>       printf("SIDM: kin. energy before scattering = %g  kin. energy after scatter = %g  rel. delta = %g \n", global_Ekin_before_total, global_Ekin_after_total, (global_Ekin_after_total-global_Ekin_before_total)/(1e-20 + global_Ekin_before_total));
713a642
> 
715a645
> 
725c655
<   unsigned char sidm_State;
---
>   int sidm_State;
728c658,660
< } * Tree_ResultsImported;
---
> }
>  *Tree_ResultsImported;
> 
736,737c668
<   unsigned char state;
<   unsigned char reaction;
---
>   int state, reaction;
739,740c670
<   /* first all active particles -> update all properties that are always calculated; i.e. those that also need updates even without a
<    * scattering happening */
---
>   /* first all active particles -> update all properties that are always calculated; i.e. those that also need updates even without a scattering happening */
742,746c672,673
< #ifndef HIERARCHICAL_GRAVITY
<     if(Tree_Points[i].ActiveFlag)
< #endif
<       if(((1 << (Tree_Points[i].Type)) & (SIDM)))
<         ncount++;
---
>     if((Tree_Points[i].Type & 16) && ((1 << (Tree_Points[i].Type & 15)) & (SIDM)))
>       ncount++;
761c688
<           P[i].sidm_Hsml   = PSIDM[ncount1].Hsml;
---
>           P[i].sidm_Hsml = PSIDM[ncount1].Hsml;
774,775c701,702
<                       sqrt(PSIDM[ncount1].VelDisp[state] - PSIDM[ncount1].Vx[state] * PSIDM[ncount1].Vx[state] -
<                            PSIDM[ncount1].Vy[state] * PSIDM[ncount1].Vy[state] - PSIDM[ncount1].Vz[state] * PSIDM[ncount1].Vz[state]);
---
>                     sqrt(PSIDM[ncount1].VelDisp[state] - PSIDM[ncount1].Vx[state] * PSIDM[ncount1].Vx[state] - PSIDM[ncount1].Vy[state] * PSIDM[ncount1].Vy[state] -
>                          PSIDM[ncount1].Vz[state] * PSIDM[ncount1].Vz[state]);
783,808c710,733
< #ifndef HIERARCHICAL_GRAVITY
<     if(Tree_Points[i].ActiveFlag)
< #endif
<       if(((1 << (Tree_Points[i].Type)) & (SIDM)))
<         {
<           Tree_ResultsImported[ncount2].sidm_NumNgb = PSIDM[ncount1].NumNgb;
<           Tree_ResultsImported[ncount2].sidm_Hsml   = PSIDM[ncount1].Hsml;
<           for(reaction = 0; reaction < SIDM_REACTIONS; reaction++)
<             Tree_ResultsImported[ncount2].sidm_PSum[reaction] = PSIDM[ncount1].PSum[reaction];
<           for(state = 0; state < SIDM_STATES; state++)
<             {
<               Tree_ResultsImported[ncount2].sidm_Density[state] = PSIDM[ncount1].Density[state];
<               if(PSIDM[ncount1].NumNgbState[state] > 0)
<                 {
<                   PSIDM[ncount1].Vx[state] /= PSIDM[ncount1].NumNgbState[state];
<                   PSIDM[ncount1].Vy[state] /= PSIDM[ncount1].NumNgbState[state];
<                   PSIDM[ncount1].Vz[state] /= PSIDM[ncount1].NumNgbState[state];
<                   PSIDM[ncount1].VelDisp[state] /= PSIDM[ncount1].NumNgbState[state];
<                   Tree_ResultsImported[ncount2].sidm_VelDisp[state] =
<                       sqrt(PSIDM[ncount1].VelDisp[state] - PSIDM[ncount1].Vx[state] * PSIDM[ncount1].Vx[state] -
<                            PSIDM[ncount1].Vy[state] * PSIDM[ncount1].Vy[state] - PSIDM[ncount1].Vz[state] * PSIDM[ncount1].Vz[state]);
<                 }
<             }
<           ncount1++;
<           ncount2++;
<         }
---
>     if((Tree_Points[i].Type & 16) && ((1 << (Tree_Points[i].Type & 15)) & (SIDM)))
>       {
>         Tree_ResultsImported[ncount2].sidm_NumNgb = PSIDM[ncount1].NumNgb;
>         Tree_ResultsImported[ncount2].sidm_Hsml = PSIDM[ncount1].Hsml;
>         for(reaction = 0; reaction < SIDM_REACTIONS; reaction++)
>           Tree_ResultsImported[ncount2].sidm_PSum[reaction] = PSIDM[ncount1].PSum[reaction];
>         for(state = 0; state < SIDM_STATES; state++)
>           {
>             Tree_ResultsImported[ncount2].sidm_Density[state] = PSIDM[ncount1].Density[state];
>             if(PSIDM[ncount1].NumNgbState[state] > 0)
>               {
>                 PSIDM[ncount1].Vx[state] /= PSIDM[ncount1].NumNgbState[state];
>                 PSIDM[ncount1].Vy[state] /= PSIDM[ncount1].NumNgbState[state];
>                 PSIDM[ncount1].Vz[state] /= PSIDM[ncount1].NumNgbState[state];
>                 PSIDM[ncount1].VelDisp[state] /= PSIDM[ncount1].NumNgbState[state];
>                 Tree_ResultsImported[ncount2].sidm_VelDisp[state] =
>                   sqrt(PSIDM[ncount1].VelDisp[state] - PSIDM[ncount1].Vx[state] * PSIDM[ncount1].Vx[state] - PSIDM[ncount1].Vy[state] * PSIDM[ncount1].Vy[state] -
>                        PSIDM[ncount1].Vz[state] * PSIDM[ncount1].Vz[state]);
>               }
>           }
>         ncount1++;
>         ncount2++;
>       }
> 
816,824c741,746
< #ifndef HIERARCHICAL_GRAVITY
<         if(Tree_Points[n].ActiveFlag)
< #endif
<           if(((1 << (Tree_Points[n].Type)) & (SIDM)))
<             {
<               Tree_ResultsImported[k].index = Tree_Points[n].index;
<               Recv_count[i]++;
<               k++;
<             }
---
>         if((Tree_Points[n].Type & 16) && ((1 << (Tree_Points[n].Type & 15)) & (SIDM)))
>           {
>             Tree_ResultsImported[k].index = Tree_Points[n].index;
>             Recv_count[i]++;
>             k++;
>           }
849,852c771,773
<           MPI_Sendrecv(&Tree_ResultsImported[Recv_offset[recvTask]], Recv_count[recvTask] * sizeof(struct resultsimported_data),
<                        MPI_BYTE, recvTask, TAG_FOF_A, &tmp_results[Send_offset[recvTask]],
<                        Send_count[recvTask] * sizeof(struct resultsimported_data), MPI_BYTE, recvTask, TAG_FOF_A, MPI_COMM_WORLD,
<                        MPI_STATUS_IGNORE);
---
>           MPI_Sendrecv(&Tree_ResultsImported[Recv_offset[recvTask]],
>                        Recv_count[recvTask] * sizeof(struct resultsimported_data), MPI_BYTE, recvTask, TAG_FOF_A,
>                        &tmp_results[Send_offset[recvTask]], Send_count[recvTask] * sizeof(struct resultsimported_data), MPI_BYTE, recvTask, TAG_FOF_A, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
866c787
<       P[target].sidm_Hsml   = tmp_results[i].sidm_Hsml;
---
>       P[target].sidm_Hsml = tmp_results[i].sidm_Hsml;
871a793
> 
890c812
<           P[i].Mass       = TSIDM[i].NewMass;
---
>           P[i].Mass = TSIDM[i].NewMass;
895,897d816
<           if((isnan(P[i].Vel[0])) || (isnan(P[i].Vel[1])) || (isnan(P[i].Vel[2])) || (isinf(P[i].Vel[0])) || (isinf(P[i].Vel[1])) ||
<              (isinf(P[i].Vel[2])))
<             terminate("SIDM: BAD VELOCITIES AFTER SCATTER: (%g|%g|%g)  %d\n", P[i].Vel[0], P[i].Vel[1], P[i].Vel[2], i);
908,909c827,828
<           Tree_ResultsImported[ncount2].sidm_State               = TSIDM[NumPart + i].NewState;
<           Tree_ResultsImported[ncount2].sidm_Mass                = TSIDM[NumPart + i].NewMass;
---
>           Tree_ResultsImported[ncount2].sidm_State = TSIDM[NumPart + i].NewState;
>           Tree_ResultsImported[ncount2].sidm_Mass = TSIDM[NumPart + i].NewMass;
955,958c874,876
<           MPI_Sendrecv(&Tree_ResultsImported[Recv_offset[recvTask]], Recv_count[recvTask] * sizeof(struct resultsimported_data),
<                        MPI_BYTE, recvTask, TAG_FOF_A, &tmp_results[Send_offset[recvTask]],
<                        Send_count[recvTask] * sizeof(struct resultsimported_data), MPI_BYTE, recvTask, TAG_FOF_A, MPI_COMM_WORLD,
<                        MPI_STATUS_IGNORE);
---
>           MPI_Sendrecv(&Tree_ResultsImported[Recv_offset[recvTask]],
>                        Recv_count[recvTask] * sizeof(struct resultsimported_data), MPI_BYTE, recvTask, TAG_FOF_A,
>                        &tmp_results[Send_offset[recvTask]], Send_count[recvTask] * sizeof(struct resultsimported_data), MPI_BYTE, recvTask, TAG_FOF_A, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
968c886
<       P[target].Mass       = tmp_results[i].sidm_Mass;
---
>       P[target].Mass = tmp_results[i].sidm_Mass;
973,976d890
<       if((isnan(P[target].Vel[0])) || (isnan(P[target].Vel[1])) || (isnan(P[target].Vel[2])) || (isinf(P[target].Vel[0])) ||
<          (isinf(P[target].Vel[1])) || (isinf(P[target].Vel[2])))
<         terminate("SIDM: BAD VELOCITIES AFTER SCATTER: (%g|%g|%g)  %d\n", P[i].Vel[0], P[i].Vel[1], P[i].Vel[2], target);
< 
982,1012d895
< }
< 
< double sidm_calc_kinetic_energy_sidm_parts(void)
< {
<   int i;
<   double local_kin_energy = 0.0, global_kin_energy = 0.0;
< 
<   SIDM_avel = 1.0 / All.cf_atime;
< 
<   for(i = 0; i < NumPart; i++)
<     if((1 << P[i].Type) & (SIDM))
<       local_kin_energy += SIDM_avel * SIDM_avel *
<                           (0.5 * P[i].Mass * (P[i].Vel[0] * P[i].Vel[0] + P[i].Vel[1] * P[i].Vel[1] + P[i].Vel[2] * P[i].Vel[2]));
< 
<   MPI_Allreduce(&local_kin_energy, &global_kin_energy, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);
< 
<   return global_kin_energy;
< }
< 
< double sidm_calc_kinetic_energy_all_parts(void)
< {
<   int i;
<   double local_kin_energy = 0.0, global_kin_energy = 0.0;
< 
<   SIDM_avel = 1.0 / All.cf_atime;
< 
<   for(i = 0; i < NumPart; i++)
<     local_kin_energy += SIDM_avel * SIDM_avel *
<                         (0.5 * P[i].Mass * (P[i].Vel[0] * P[i].Vel[0] + P[i].Vel[1] * P[i].Vel[1] + P[i].Vel[2] * P[i].Vel[2]));
< 
<   MPI_Allreduce(&local_kin_energy, &global_kin_energy, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);
1014d896
<   return global_kin_energy;
